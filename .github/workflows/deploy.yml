name: Deploy Pennyworth Infrastructure

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  BASE_DOMAIN: ${{ secrets.BASE_DOMAIN }}
  ROUTE53_HOSTED_ZONE_ID: ${{ secrets.ROUTE53_HOSTED_ZONE_ID }}
  AWS_DEPLOY_ROLE_ARN: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
  STACK_NAME: ${{ secrets.STACK_NAME }}
  ACM_CERTIFICATE_ARN: ${{ secrets.ACM_CERTIFICATE_ARN }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Build and package Lambda
        run: sam build --use-container
      - name: Deploy with SAM
        run: |
          sam deploy --stack-name $STACK_NAME \
            --capabilities CAPABILITY_IAM \
            --region $AWS_REGION \
            --resolve-s3 \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
              BaseDomain=$BASE_DOMAIN \
              AcmCertificateArn=$ACM_CERTIFICATE_ARN \
              Route53HostedZoneId=$ROUTE53_HOSTED_ZONE_ID 
      - name: Set Lambda log retention to 14 days
        run: |
          set -euo pipefail
          for group in $(aws logs describe-log-groups --log-group-name-prefix "/aws/lambda/" --query 'logGroups[*].logGroupName' --output text); do
            echo "Setting retention for $group to 14 days..."
            aws logs put-retention-policy --log-group-name "$group" --retention-in-days 14
          done
      - name: Store CLI config in AWS Secrets Manager
        # SECURITY: This step stores resource IDs (not secrets) in AWS Secrets Manager for CLI use.
        # Do NOT print or echo the values to logs. Only the secret name is visible in logs.
        # The secret is only accessible to authorized users/roles (e.g., CLI admins).
        run: |
          set -e
          CONFIG_JSON=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region $AWS_REGION \
            --query "Stacks[0].Outputs[?OutputKey=='UserPoolId' || OutputKey=='UserPoolClientId' || OutputKey=='IdentityPoolId' || OutputKey=='ApiKeysTableName'].[OutputKey,OutputValue]" \
            --output json | jq -r 'map({(.[0]): .[1]}) | add | @json')
          if output=$(aws secretsmanager create-secret --name /pennyworth/$STACK_NAME/cli-config --secret-string "$CONFIG_JSON" 2>&1 > /dev/null); then
            echo "[secrets] CLI config secret created successfully."
          elif output=$(aws secretsmanager put-secret-value --secret-id /pennyworth/$STACK_NAME/cli-config --secret-string "$CONFIG_JSON" 2>&1 > /dev/null); then
            echo "[secrets] CLI config secret updated successfully."
          else
            echo "[secrets] Error creating or updating CLI config secret:"
            echo "$output"
            exit 1
          fi 