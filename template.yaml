AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Pennyworth - OpenAI-compatible API proxy for AWS Bedrock

# Parameters required for deployment
Parameters:
  # Base domain for the API (e.g., example.com)
  # Used to create the custom API Gateway domain (api.example.com)
  BaseDomain:
    Type: String
    Description: The base domain for your API (e.g., example.com). Used to create the custom API Gateway domain (api.example.com).

  # ACM certificate ARN for HTTPS
  # Must be in the same region as API Gateway
  AcmCertificateArn:
    Type: String
    Description: The ARN of the ACM certificate for your custom domain. Must be in the same region as API Gateway.

  # Route 53 hosted zone ID for DNS
  # Used to create the DNS record for the API
  Route53HostedZoneId:
    Type: String
    Description: The ID of your Route 53 hosted zone for the base domain. Used to create the DNS record for the API.

  # Environment (dev/prod)
  # Controls resource naming and some configuration
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: The deployment environment (dev or prod). Controls resource naming and some configuration.

Resources:
  # Cognito User Pool for authentication and management of CLI/admin users.
  PennyworthUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AWS::StackName}-cli-admin-user-pool"
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: name
          AttributeDataType: String
          Required: true
          Mutable: true
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      UserPoolTags:
        Project: Pennyworth
        Environment: !Ref Environment
        StackName: !Ref AWS::StackName
        Component: Authentication
      # TODO: Enable AdvancedSecurityMode: ENFORCED for production
      # UserPoolAddOns:
      #   AdvancedSecurityMode: ENFORCED

  # User Pool Client that enables the CLI to authenticate users and obtain tokens from Cognito.
  PennyworthUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref PennyworthUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED

  # Identity Pool that issues temporary AWS credentials to authenticated users from the User Pool.
  PennyworthIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub "${AWS::StackName}-cli-admin-identity-pool"
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref PennyworthUserPoolClient
          ProviderName: !GetAtt PennyworthUserPool.ProviderName

  # IAM role assumed by authenticated CLI users, granting access to manage API keys in DynamoDB.
  PennyworthCliUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref PennyworthIdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: PennyworthCliUserPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt ApiKeysTable.Arn
      Tags:
        - Key: Project
          Value: Pennyworth
        - Key: Environment
          Value: !Ref Environment
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: Component
          Value: Authentication

  # Attaches the CLI user IAM role to authenticated users in the Identity Pool.
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref PennyworthIdentityPool
      Roles:
        authenticated: !GetAtt PennyworthCliUserRole.Arn

  # DynamoDB table for storing and managing API keys and their metadata.
  ApiKeysTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: api_key_hash
          AttributeType: S
        - AttributeName: owner
          AttributeType: S
      KeySchema:
        - AttributeName: api_key_hash
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: OwnerIndex
          KeySchema:
            - AttributeName: owner
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Project
          Value: Pennyworth
        - Key: Environment
          Value: !Ref Environment
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: Component
          Value: APIKeys

  # Lambda function that proxies OpenAI-compatible API requests to AWS Bedrock.
  LiteLLMProxyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.lambda_handler
      Runtime: python3.11
      CodeUri: src/lambda/
      Description: LiteLLM proxy for OpenAI-compatible API
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          API_KEYS_TABLE: !Ref ApiKeysTable
          USER_POOL_ID: !Ref PennyworthUserPool
          USER_POOL_CLIENT_ID: !Ref PennyworthUserPoolClient
          IDENTITY_POOL_ID: !Ref PennyworthIdentityPool
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ApiKeysTable
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: '*'
      Events:
        ProxyApi:
          Type: Api
          Properties:
            Path: /v1/{proxy+}
            Method: any
        MCPApi:
          Type: Api
          Properties:
            Path: /mcp/{proxy+}
            Method: any
      Tags:
        Project: Pennyworth
        Environment: !Ref Environment
        StackName: !Ref AWS::StackName
        Component: APIProxy

  # Custom domain for the API, providing a user-friendly endpoint (e.g., api.example.com).
  ApiCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Sub "api.${BaseDomain}"
      RegionalCertificateArn: !Ref AcmCertificateArn
      EndpointConfiguration:
        Types: [REGIONAL]
      Tags:
        - Key: Project
          Value: Pennyworth
        - Key: Environment
          Value: !Ref Environment
        - Key: StackName
          Value: !Ref AWS::StackName
        - Key: Component
          Value: API

  # Maps the custom domain to the deployed API Gateway stage.
  ApiBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn: ServerlessRestApiProdStage
    Properties:
      DomainName: !Ref ApiCustomDomain
      RestApiId: !Ref ServerlessRestApi
      Stage: Prod

  # Route 53 DNS record that points the custom domain to the API Gateway endpoint.
  ApiCustomDomainRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref Route53HostedZoneId
      Name: !Sub "api.${BaseDomain}"
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiCustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt ApiCustomDomain.RegionalHostedZoneId

  # Lambda function that serves public and protected API parameter endpoints for clients.
  WellKnownParametersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: parameters.lambda_handler
      Runtime: python3.11
      CodeUri: src/lambda/
      Description: Returns public parameters for CLI and clients
      MemorySize: 128
      Timeout: 5
      Environment:
        Variables:
          USER_POOL_ID: !Ref PennyworthUserPool
          USER_POOL_CLIENT_ID: !Ref PennyworthUserPoolClient
          IDENTITY_POOL_ID: !Ref PennyworthIdentityPool
      Events:
        WellKnownApi:
          Type: Api
          Properties:
            Path: /v1/parameters/well-known
            Method: get
        ProtectedApi:
          Type: Api
          Properties:
            Path: /v1/parameters/protected
            Method: get
      Tags:
        Project: Pennyworth
        Environment: !Ref Environment
        StackName: !Ref AWS::StackName
        Component: WellKnown

Outputs:
  # Cognito User Pool ID
  # Required for user management and authentication
  UserPoolId:
    Description: Cognito User Pool ID. Required for user management and authentication.
    Value: !Ref PennyworthUserPool
    Export:
      Name: !Sub ${AWS::StackName}-UserPoolId

  # Cognito User Pool Client ID
  # Required for CLI authentication
  UserPoolClientId:
    Description: Cognito User Pool Client ID. Required for CLI authentication.
    Value: !Ref PennyworthUserPoolClient
    Export:
      Name: !Sub ${AWS::StackName}-UserPoolClientId

  # Cognito Identity Pool ID
  # Required for temporary AWS credentials
  IdentityPoolId:
    Description: Cognito Identity Pool ID. Required for temporary AWS credentials.
    Value: !Ref PennyworthIdentityPool
    Export:
      Name: !Sub ${AWS::StackName}-IdentityPoolId

  # DynamoDB table name for API keys
  # Used for API key storage and management
  ApiKeysTableName:
    Description: DynamoDB table name for API keys. Used for API key storage and management.
    Value: !Ref ApiKeysTable
    Export:
      Name: !Sub ${AWS::StackName}-ApiKeysTableName

  # API Gateway endpoint URL
  # The default API Gateway URL for the v1 API
  ApiUrl:
    Description: API Gateway endpoint URL for the v1 API. This is the default API Gateway URL.
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/v1"
    Export:
      Name: !Sub ${AWS::StackName}-ApiUrl

  # Custom domain URL
  # The custom domain URL for the v1 API
  CustomApiUrl:
    Description: Custom domain URL for the v1 API. This is the primary URL for API access.
    Value: !Sub "https://api.${BaseDomain}/v1"
    Export:
      Name: !Sub ${AWS::StackName}-CustomApiUrl

  # Optionally add CliUserRoleArn output
  CliUserRoleArn:
    Description: IAM Role ARN for CLI users.
    Value: !GetAtt PennyworthCliUserRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CliUserRoleArn 